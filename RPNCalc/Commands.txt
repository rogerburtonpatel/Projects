Full list of commands for CalcYouLater. 
Parsed from COMP15 CalcYouLater Project Spec, with edits by:

Roger A. Burtonpatel, Tufts University, Spring 2021

COMMAND LIST: 

0. a number causes a Datum containing the number to be pushed onto the stack. 
NOTE: Must be an integer. May be negative. 
Ex: 5, 2 -1 

1. “#t” causes a Datum with the boolean true to be pushed on the stack

2. “#f” causes a Datum with the boolean false to be pushed on the stack

3. “not” pops the top element of the stack, a boolean, and pushes its boolean
inverse

4. “print” prints the value on the top of the stack to cout (without popping
 it) followed by a new line.

5. “clear” clears the calculator, emptying the stack.

6. “drop” causes the top element on the stack to be removed

“dup” duplicates the top element on the stack

7. “swap” swaps the top two elements on the stack

8. “quit”, quits the calculator completely. When the program quits, it prints
the following message to cerr: “Thank you for using CalcYouLater.”

9. an operator, which is one of “+”, “-”, “*”, “/”, or “mod” causes the top
two elements, integers, to be popped off the stack, the operation to be
performed on them (addition, subtraction, multiplication, division, or
remainder), and the result to be pushed on the top of the stack. The first 
operand of the operation is the first (deeper) item on the stack. 

10. an operator, which is one of “<”, “>”, “<=”, “>=”, or “==” causes the top 
two elements to be popped off the stack, the operation to be performed on them 
(some kind of logical comparison) in the same order as above, and the result to 
be pushed on the top of the stack as a boolean. 

11. “{” followed by a space, a sequence of characters, followed by a space, and
 then “}” is called an rstring, and is stored in an rstring Datum as a string 
 that begins “{ ” and ends " }" (note the spaces), and contains the sequence of 
 commands as the part of the string between. For example, an rstring might be 
 stored in a Datum as “{ 3 * }”. Typing a rstring pushes it onto the stack for 
 later use.
Ex: { 1 2 - #t }, { 3 { 4 5 + } mod }

12. “exec” takes the topmost element on the stack, an rstring, and processes 
its contents as a sequence of commands. If the topmost element is not an
rstring, it will print “Error: cannot execute non rstring” to cerr.
After printing, it will continue accepting input.
Ex: { 1 2 - #t } exec will push -1 and #t onto the stack.  

13. “file” pops the top element off the stack, which must be a rstring. If it 
is not an rstring it will print “Error: file operand not rstring” to cerr and 
continue accepting input.

If it is an rstring, then the part of the block between the "{ " and " }" (note
spaces) is treated as a file name.

Ex:, the rstring might be "{ square.cylc }", in which case, the file name is 
“square.cylc”. The contents of the named file is read and processed as if it 
had been typed into the command loop. If the file cannot be opened or read, the
message “Unable to read FILENAME” (where “FILENAME” is replaced with the name 
of the file specified in the command) is printed to cerr. The command loop then 
continues reading data from its last input source.

14. “if” pops an rstring, the false case, off the stack, 
pops another rstring, the true case, off the stack, and 
pops a boolean, the test, off the stack. 
That is, “if” assumes that the stack will look like this at the time it is 
called:

     top:     | FalseCase |
              | TrueCase  |
  bottom:     | Condition |
              -------------
If the test condition is the boolean “true”, then the true case (an rstring)
will be exec’d.

If the test is the boolean “false”, the false case (an rstring) will be exec’d. 

If any of the elements are of the wrong type, the appropriate error message 
will print to cerr:

    "Error: expected rstring in if branch\n"
    "Error: expected boolean in if test\n"

After printing to cerr, it will continue accepting input.

Ex: #t { 1 } { 2 } if will result in 1 being pushed onto the stack, 
while 
#f { 1 } { 2 } if will result in 2 being pushed on the stack. 


Enjoy the CalcYouLater! 
